// Inventory System - PZ Style
// Grid-based inventory (10x5 = 50 slots)
// Items: ID, name, quantity

@extern("puts")
func c_puts(s: String) -> Int

@extern("printf")
@variadic
func c_printf(format: String) -> Int

@extern("malloc")
func c_malloc(size: Int) -> Ptr<Unit>

@extern("free")
func c_free(ptr: Ptr<Unit>) -> Unit

@extern("pole_write_i32_at")
func write_i32_at(ptr: Ptr<Unit>, offset: Int, value: Int) -> Unit

@extern("pole_read_i32_at")
func read_i32_at(ptr: Ptr<Unit>, offset: Int) -> Int

// Constants
func INVENTORY_WIDTH() -> Int: 10
func INVENTORY_HEIGHT() -> Int: 5
func INVENTORY_SIZE() -> Int: 50

// Item IDs
func ITEM_EMPTY() -> Int: 0
func ITEM_BREAD() -> Int: 1
func ITEM_CANNED_FOOD() -> Int: 2
func ITEM_AXE() -> Int: 3
func ITEM_HAMMER() -> Int: 4

// Clear all slots recursively
func clear_inventory(inv: Ptr<Unit>, slot: Int) -> Int:
if slot >= 50 then
0
else
let offset = slot * 8 in
let _ = write_i32_at(inv, offset, 0) in
let _ = write_i32_at(inv, offset + 4, 0) in
clear_inventory(inv, slot + 1)

// Create inventory (50 slots, each: item_id + quantity = 2 ints = 8 bytes)
// Total: 50 * 8 = 400 bytes
func create_inventory(dummy: Unit) -> Ptr<Unit>:
let inv = c_malloc(400) in
let _ = clear_inventory(inv, 0) in
inv

// Get item ID at slot
func get_item_id(inv: Ptr<Unit>, slot: Int) -> Int:
let offset = slot * 8 in
read_i32_at(inv, offset)

// Get quantity at slot
func get_quantity(inv: Ptr<Unit>, slot: Int) -> Int:
let offset = slot * 8 in
read_i32_at(inv, offset + 4)

// Set item at slot
func set_item(inv: Ptr<Unit>, slot: Int, item_id: Int, quantity: Int) -> Int:
let offset = slot * 8 in
let _ = write_i32_at(inv, offset, item_id) in
let _ = write_i32_at(inv, offset + 4, quantity) in
0

// Add item to inventory (find first empty slot)
func add_item_to_slot(inv: Ptr<Unit>, slot: Int, item_id: Int, quantity: Int) -> Int:
if slot >= 50 then
let _ = c_puts("Inventory full!") in 0
else
let current_id = get_item_id(inv, slot) in
if current_id == 0 then
let _ = set_item(inv, slot, item_id, quantity) in
let _ = c_puts("Added item to inventory") in
1
else
add_item_to_slot(inv, slot + 1, item_id, quantity)

// Add item (start from slot 0)
func add_item(inv: Ptr<Unit>, item_id: Int, quantity: Int) -> Int:
add_item_to_slot(inv, 0, item_id, quantity)

// Remove item from specific slot
func remove_item(inv: Ptr<Unit>, slot: Int) -> Int:
let item_id = get_item_id(inv, slot) in
if item_id == 0 then
let _ = c_puts("Slot already empty") in 0
else
let _ = set_item(inv, slot, 0, 0) in
let _ = c_puts("Removed item from slot") in
1

// Print inventory (first 10 slots)
func print_slot(inv: Ptr<Unit>, slot: Int) -> Int:
if slot >= 10 then
0
else
let item_id = get_item_id(inv, slot) in
let qty = get_quantity(inv, slot) in
if item_id > 0 then
let _ = c_puts("  Slot: Item found") in
print_slot(inv, slot + 1)
else
let _ = c_puts("  Slot: Empty") in
print_slot(inv, slot + 1)

// Test inventory system
func test_inventory(dummy: Unit) -> Int:
let _ = c_puts("=== Inventory System Test ===") in
let _ = c_puts("") in
let inv = create_inventory(()) in
let _ = c_puts("Adding items...") in
let _ = add_item(inv, 1, 2) in
let _ = add_item(inv, 2, 5) in
let _ = add_item(inv, 3, 1) in
let _ = add_item(inv, 4, 1) in
let _ = c_puts("") in
let _ = c_puts("Inventory contents:") in
let _ = print_slot(inv, 0) in
let _ = c_puts("") in
let _ = c_puts("Removing item from slot 1...") in
let _ = remove_item(inv, 1) in
let _ = c_puts("") in
let _ = c_puts("Inventory after removal:") in
let _ = print_slot(inv, 0) in
let _ = c_free(inv) in
0

func main() -> Int:
test_inventory(())
