// Crafting System - PZ Style
// Recipe-based item crafting
// Material verification and consumption

@extern("puts")
func c_puts(s: String) -> Int

@extern("malloc")
func c_malloc(size: Int) -> Ptr<Unit>

@extern("free")
func c_free(ptr: Ptr<Unit>) -> Unit

@extern("pole_write_i32_at")
func write_i32_at(ptr: Ptr<Unit>, offset: Int, value: Int) -> Unit

@extern("pole_read_i32_at")
func read_i32_at(ptr: Ptr<Unit>, offset: Int) -> Int

// Item IDs
func ITEM_WOOD() -> Int: 1
func ITEM_NAIL() -> Int: 2
func ITEM_ROPE() -> Int: 3
func ITEM_PLANK() -> Int: 4
func ITEM_WOODEN_SPEAR() -> Int: 5
func ITEM_BARRICADE() -> Int: 6

// Inventory (simplified - 10 slots)
// Each slot: [item_id: Int, quantity: Int] = 8 bytes
// Total: 10 * 8 = 80 bytes
func create_inventory(dummy: Unit) -> Ptr<Unit>:
c_malloc(80)

func get_item_id(inv: Ptr<Unit>, slot: Int) -> Int:
let offset = slot * 8 in
read_i32_at(inv, offset)

func get_quantity(inv: Ptr<Unit>, slot: Int) -> Int:
let offset = slot * 8 in
read_i32_at(inv, offset + 4)

func set_item(inv: Ptr<Unit>, slot: Int, item_id: Int, quantity: Int) -> Int:
let offset = slot * 8 in
let _ = write_i32_at(inv, offset, item_id) in
let _ = write_i32_at(inv, offset + 4, quantity) in
0

// Find item in inventory, return slot (-1 if not found)
func find_item(inv: Ptr<Unit>, item_id: Int, slot: Int) -> Int:
if slot >= 10 then
0 - 1
else
let current_id = get_item_id(inv, slot) in
if current_id == item_id then
slot
else
find_item(inv, item_id, slot + 1)

// Check if inventory has enough of an item
func has_material(inv: Ptr<Unit>, item_id: Int, required: Int) -> Int:
let slot = find_item(inv, item_id, 0) in
if slot < 0 then
0
else
let quantity = get_quantity(inv, slot) in
if quantity >= required then 1 else 0

// Consume materials from inventory
func consume_material(inv: Ptr<Unit>, item_id: Int, amount: Int) -> Int:
let slot = find_item(inv, item_id, 0) in
if slot < 0 then
0
else
let current_qty = get_quantity(inv, slot) in
let new_qty = current_qty - amount in
if new_qty <= 0 then
let _ = set_item(inv, slot, 0, 0) in
1
else
let _ = set_item(inv, slot, item_id, new_qty) in
1

// Add item to first empty slot
func add_item_to_slot(inv: Ptr<Unit>, slot: Int, item_id: Int, quantity: Int) -> Int:
if slot >= 10 then
let _ = c_puts("Inventory full!") in
0
else
let current_id = get_item_id(inv, slot) in
if current_id == 0 then
let _ = set_item(inv, slot, item_id, quantity) in
1
else
add_item_to_slot(inv, slot + 1, item_id, quantity)

func add_item(inv: Ptr<Unit>, item_id: Int, quantity: Int) -> Int:
add_item_to_slot(inv, 0, item_id, quantity)

// Recipe: Wooden Spear = 1 Wood + 1 Nail
func craft_wooden_spear(inv: Ptr<Unit>) -> Int:
let has_wood = has_material(inv, 1, 1) in
let has_nail = has_material(inv, 2, 1) in
if has_wood == 0 then
let _ = c_puts("Missing: Wood") in
0
else
if has_nail == 0 then
let _ = c_puts("Missing: Nail") in
0
else
let _ = c_puts("Crafting: Wooden Spear") in
let _ = consume_material(inv, 1, 1) in
let _ = consume_material(inv, 2, 1) in
let _ = add_item(inv, 5, 1) in
let _ = c_puts("Crafted: Wooden Spear") in
1

// Recipe: Barricade = 3 Plank + 2 Nail
func craft_barricade(inv: Ptr<Unit>) -> Int:
let has_plank = has_material(inv, 4, 3) in
let has_nail = has_material(inv, 2, 2) in
if has_plank == 0 then
let _ = c_puts("Missing: 3x Plank") in
0
else
if has_nail == 0 then
let _ = c_puts("Missing: 2x Nail") in
0
else
let _ = c_puts("Crafting: Barricade") in
let _ = consume_material(inv, 4, 3) in
let _ = consume_material(inv, 2, 2) in
let _ = add_item(inv, 6, 1) in
let _ = c_puts("Crafted: Barricade") in
1

// Print inventory
func print_inventory_slot(inv: Ptr<Unit>, slot: Int) -> Int:
if slot >= 10 then
0
else
let item_id = get_item_id(inv, slot) in
if item_id > 0 then
let qty = get_quantity(inv, slot) in
let _ = c_puts("  Item found") in
print_inventory_slot(inv, slot + 1)
else
print_inventory_slot(inv, slot + 1)

func print_inventory(inv: Ptr<Unit>) -> Int:
let _ = c_puts("Inventory:") in
print_inventory_slot(inv, 0)

// Test crafting system
func test_crafting(dummy: Unit) -> Int:
let _ = c_puts("=== Crafting System Test ===") in
let _ = c_puts("") in
let inv = create_inventory(()) in
let _ = c_puts("Adding materials...") in
let _ = add_item(inv, 1, 3) in
let _ = add_item(inv, 2, 5) in
let _ = add_item(inv, 4, 4) in
let _ = print_inventory(inv) in
let _ = c_puts("") in
let _ = c_puts("Attempt 1: Craft Wooden Spear") in
let _ = craft_wooden_spear(inv) in
let _ = print_inventory(inv) in
let _ = c_puts("") in
let _ = c_puts("Attempt 2: Craft Barricade") in
let _ = craft_barricade(inv) in
let _ = print_inventory(inv) in
let _ = c_puts("") in
let _ = c_puts("Attempt 3: Craft Barricade (should fail)") in
let _ = craft_barricade(inv) in
let _ = c_puts("") in
let _ = c_free(inv) in
0

func main() -> Int:
test_crafting(())
