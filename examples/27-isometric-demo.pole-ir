// Project Zomboid Style - Isometric Tile Rendering Demo
// Day 1-2: Isometric coordinate transformation and basic rendering

// SDL2 External Functions
@extern("SDL_Init")
func SDL_Init(flags: Int) -> Int

@extern("SDL_CreateWindow") 
func SDL_CreateWindow(title: Ptr<Unit>, x: Int, y: Int, w: Int, h: Int, flags: Int) -> Ptr<Unit>

@extern("SDL_CreateRenderer")
func SDL_CreateRenderer(window: Ptr<Unit>, index: Int, flags: Int) -> Ptr<Unit>

@extern("SDL_RenderClear")
func SDL_RenderClear(renderer: Ptr<Unit>) -> Int

@extern("SDL_RenderPresent")
func SDL_RenderPresent(renderer: Ptr<Unit>) -> Unit

@extern("SDL_SetRenderDrawColor")
func SDL_SetRenderDrawColor(renderer: Ptr<Unit>, r: Int, g: Int, b: Int, a: Int) -> Int

@extern("SDL_RenderDrawLine")
func SDL_RenderDrawLine(renderer: Ptr<Unit>, x1: Int, y1: Int, x2: Int, y2: Int) -> Int

@extern("SDL_Delay")
func SDL_Delay(ms: Int) -> Unit

@extern("SDL_DestroyRenderer")
func SDL_DestroyRenderer(renderer: Ptr<Unit>) -> Unit

@extern("SDL_DestroyWindow")
func SDL_DestroyWindow(window: Ptr<Unit>) -> Unit

@extern("SDL_Quit")
func SDL_Quit() -> Unit

// Draw a diamond-shaped isometric tile outline
// Isometric transformation: screen_x = (tile_x - tile_y) * 32 + 400
//                           screen_y = (tile_x + tile_y) * 16 + 100
func draw_tile_outline(renderer: Ptr<Unit>, tile_x: Int, tile_y: Int, r: Int, g: Int, b: Int) -> Unit:
  SDL_SetRenderDrawColor(renderer, r, g, b, 255);
  SDL_RenderDrawLine(renderer, (tile_x - tile_y) * 32 + 400, (tile_x + tile_y) * 16 + 84, (tile_x - tile_y) * 32 + 432, (tile_x + tile_y) * 16 + 100);
  SDL_RenderDrawLine(renderer, (tile_x - tile_y) * 32 + 432, (tile_x + tile_y) * 16 + 100, (tile_x - tile_y) * 32 + 400, (tile_x + tile_y) * 16 + 116);
  SDL_RenderDrawLine(renderer, (tile_x - tile_y) * 32 + 400, (tile_x + tile_y) * 16 + 116, (tile_x - tile_y) * 32 + 368, (tile_x + tile_y) * 16 + 100);
  SDL_RenderDrawLine(renderer, (tile_x - tile_y) * 32 + 368, (tile_x + tile_y) * 16 + 100, (tile_x - tile_y) * 32 + 400, (tile_x + tile_y) * 16 + 84)

// Draw a filled isometric tile (simple cross-hatch pattern)
func draw_tile_filled(renderer: Ptr<Unit>, tile_x: Int, tile_y: Int, r: Int, g: Int, b: Int) -> Unit:
  let sx = (tile_x - tile_y) * 32 + 400 in
  let sy = (tile_x + tile_y) * 16 + 100 in
  
  let _ = SDL_SetRenderDrawColor(renderer, r, g, b, 255) in
  
  // Draw cross-hatch pattern
  let _ = SDL_RenderDrawLine(renderer, sx - 32, sy, sx + 32, sy) in
  let _ = SDL_RenderDrawLine(renderer, sx - 24, sy - 4, sx + 24, sy + 4) in
  let _ = SDL_RenderDrawLine(renderer, sx - 16, sy - 8, sx + 16, sy + 8) in
  let _ = SDL_RenderDrawLine(renderer, sx - 8, sy - 12, sx + 8, sy + 12) in
  
  // Draw outline
  draw_tile_outline(renderer, tile_x, tile_y, r, g, b)

// Render a 10x10 isometric grid with different tile types
func render_tilemap(renderer: Ptr<Unit>) -> Unit:
  // Y-sorting: render from back to front (north-west to south-east)
  // Row 0
  let _ = draw_tile_filled(renderer, 0, 0, 100, 200, 100) in  // Grass
  let _ = draw_tile_filled(renderer, 1, 0, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 2, 0, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 3, 0, 150, 150, 150) in  // Road
  let _ = draw_tile_filled(renderer, 4, 0, 150, 150, 150) in
  let _ = draw_tile_filled(renderer, 5, 0, 150, 150, 150) in
  let _ = draw_tile_filled(renderer, 6, 0, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 7, 0, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 8, 0, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 9, 0, 100, 200, 100) in
  
  // Row 1
  let _ = draw_tile_filled(renderer, 0, 1, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 1, 1, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 2, 1, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 3, 1, 150, 150, 150) in
  let _ = draw_tile_filled(renderer, 4, 1, 150, 150, 150) in
  let _ = draw_tile_filled(renderer, 5, 1, 150, 150, 150) in
  let _ = draw_tile_filled(renderer, 6, 1, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 7, 1, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 8, 1, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 9, 1, 100, 200, 100) in
  
  // Row 2
  let _ = draw_tile_filled(renderer, 0, 2, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 1, 2, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 2, 2, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 3, 2, 150, 150, 150) in
  let _ = draw_tile_filled(renderer, 4, 2, 150, 150, 150) in
  let _ = draw_tile_filled(renderer, 5, 2, 150, 150, 150) in
  let _ = draw_tile_filled(renderer, 6, 2, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 7, 2, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 8, 2, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 9, 2, 100, 200, 100) in
  
  // Row 3 - Building floor
  let _ = draw_tile_filled(renderer, 0, 3, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 1, 3, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 2, 3, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 3, 3, 150, 150, 150) in
  let _ = draw_tile_filled(renderer, 4, 3, 180, 160, 140) in  // Building
  let _ = draw_tile_filled(renderer, 5, 3, 180, 160, 140) in
  let _ = draw_tile_filled(renderer, 6, 3, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 7, 3, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 8, 3, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 9, 3, 100, 200, 100) in
  
  // Row 4 - Building floor
  let _ = draw_tile_filled(renderer, 0, 4, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 1, 4, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 2, 4, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 3, 4, 150, 150, 150) in
  let _ = draw_tile_filled(renderer, 4, 4, 180, 160, 140) in
  let _ = draw_tile_filled(renderer, 5, 4, 180, 160, 140) in
  let _ = draw_tile_filled(renderer, 6, 4, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 7, 4, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 8, 4, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 9, 4, 100, 200, 100) in
  
  // Row 5
  let _ = draw_tile_filled(renderer, 0, 5, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 1, 5, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 2, 5, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 3, 5, 150, 150, 150) in
  let _ = draw_tile_filled(renderer, 4, 5, 150, 150, 150) in
  let _ = draw_tile_filled(renderer, 5, 5, 150, 150, 150) in
  let _ = draw_tile_filled(renderer, 6, 5, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 7, 5, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 8, 5, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 9, 5, 100, 200, 100) in
  
  // Row 6
  let _ = draw_tile_filled(renderer, 0, 6, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 1, 6, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 2, 6, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 3, 6, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 4, 6, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 5, 6, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 6, 6, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 7, 6, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 8, 6, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 9, 6, 100, 200, 100) in
  
  // Row 7
  let _ = draw_tile_filled(renderer, 0, 7, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 1, 7, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 2, 7, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 3, 7, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 4, 7, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 5, 7, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 6, 7, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 7, 7, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 8, 7, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 9, 7, 100, 200, 100) in
  
  // Row 8
  let _ = draw_tile_filled(renderer, 0, 8, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 1, 8, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 2, 8, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 3, 8, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 4, 8, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 5, 8, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 6, 8, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 7, 8, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 8, 8, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 9, 8, 100, 200, 100) in
  
  // Row 9
  let _ = draw_tile_filled(renderer, 0, 9, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 1, 9, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 2, 9, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 3, 9, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 4, 9, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 5, 9, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 6, 9, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 7, 9, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 8, 9, 100, 200, 100) in
  let _ = draw_tile_filled(renderer, 9, 9, 100, 200, 100) in
  ()

// Main function - Initialize SDL2 and render isometric grid
func main() -> Int:
  // Initialize SDL2 (VIDEO subsystem)
  let _ = SDL_Init(32) in
  
  // Create window (800x600)
  let window = SDL_CreateWindow(0, 100, 100, 800, 600, 4) in
  
  // Create renderer with hardware acceleration
  let renderer = SDL_CreateRenderer(window, -1, 2) in
  
  // Clear screen with dark green background
  let _ = SDL_SetRenderDrawColor(renderer, 40, 80, 40, 255) in
  let _ = SDL_RenderClear(renderer) in
  
  // Render the 10x10 isometric tilemap
  let _ = render_tilemap(renderer) in
  
  // Present the rendered frame
  let _ = SDL_RenderPresent(renderer) in
  
  // Display for 10 seconds
  let _ = SDL_Delay(10000) in
  
  // Cleanup
  let _ = SDL_DestroyRenderer(renderer) in
  let _ = SDL_DestroyWindow(window) in
  let _ = SDL_Quit() in
  
  0
