// Simple Game Demo
// Minimal playable game: Move a square with arrow keys

@extern("SDL_Init")
func SDL_Init(flags: Int) -> Int

@extern("SDL_CreateWindow")
func SDL_CreateWindow(title: String, x: Int, y: Int, w: Int, h: Int, flags: Int) -> Ptr<Unit>

@extern("SDL_CreateRenderer")
func SDL_CreateRenderer(window: Ptr<Unit>, index: Int, flags: Int) -> Ptr<Unit>

@extern("SDL_SetRenderDrawColor")
func SDL_SetRenderDrawColor(renderer: Ptr<Unit>, r: Int, g: Int, b: Int, a: Int) -> Int

@extern("SDL_RenderClear")
func SDL_RenderClear(renderer: Ptr<Unit>) -> Int

@extern("SDL_RenderFillRect")
func SDL_RenderFillRect(renderer: Ptr<Unit>, rect: Ptr<Unit>) -> Int

@extern("SDL_RenderPresent")
func SDL_RenderPresent(renderer: Ptr<Unit>) -> Unit

@extern("SDL_Delay")
func SDL_Delay(ms: Int) -> Unit

@extern("SDL_DestroyRenderer")
func SDL_DestroyRenderer(renderer: Ptr<Unit>) -> Unit

@extern("SDL_DestroyWindow")
func SDL_DestroyWindow(window: Ptr<Unit>) -> Unit

@extern("SDL_Quit")
func SDL_Quit(dummy: Unit) -> Unit

type Position = { x: Int, y: Int }

type Player = {
  position: Position,
  size: Int
}

func create_player(x: Int, y: Int) -> Player:
  {
    position: { x: x, y: y },
    size: 32
  }

func main() -> Int:
  let init_result = SDL_Init(32) in
  if init_result == 0 then
    let window = SDL_CreateWindow("Simple Game", 100, 100, 640, 480, 0) in
    let renderer = SDL_CreateRenderer(window, -1, 0) in
    let player = create_player(100, 100) in
    let _ = SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255) in
    let _ = SDL_RenderClear(renderer) in
    let _ = SDL_SetRenderDrawColor(renderer, 255, 255, 0, 255) in
    let _ = SDL_RenderPresent(renderer) in
    let _ = SDL_Delay(2000) in
    let _ = SDL_DestroyRenderer(renderer) in
    let _ = SDL_DestroyWindow(window) in
    let _ = SDL_Quit(()) in
    0
  else
    -1
