@extern("SDL_Init")
func SDL_Init(flags: Int) -> Int

@extern("SDL_CreateWindow") 
func SDL_CreateWindow(title: String, x: Int, y: Int, w: Int, h: Int, flags: Int) -> Ptr<Unit>

@extern("SDL_CreateRenderer")
func SDL_CreateRenderer(window: Ptr<Unit>, index: Int, flags: Int) -> Ptr<Unit>

@extern("SDL_RenderClear")
func SDL_RenderClear(renderer: Ptr<Unit>) -> Int

@extern("SDL_RenderPresent")
func SDL_RenderPresent(renderer: Ptr<Unit>) -> Unit

@extern("SDL_SetRenderDrawColor")
func SDL_SetRenderDrawColor(renderer: Ptr<Unit>, r: Int, g: Int, b: Int, a: Int) -> Int

@extern("SDL_RenderDrawLine")
func SDL_RenderDrawLine(renderer: Ptr<Unit>, x1: Int, y1: Int, x2: Int, y2: Int) -> Int

@extern("SDL_Delay")
func SDL_Delay(ms: Int) -> Unit

@extern("SDL_DestroyRenderer")
func SDL_DestroyRenderer(renderer: Ptr<Unit>) -> Unit

@extern("SDL_DestroyWindow")
func SDL_DestroyWindow(window: Ptr<Unit>) -> Unit

@extern("SDL_Quit")
func SDL_Quit(dummy: Unit) -> Unit

func draw_one_tile(renderer: Ptr<Unit>) -> Unit :
  let _ = SDL_SetRenderDrawColor(renderer, 100, 200, 100, 255) in
  let _ = SDL_RenderDrawLine(renderer, 400, 284, 432, 300) in
  let _ = SDL_RenderDrawLine(renderer, 432, 300, 400, 316) in
  let _ = SDL_RenderDrawLine(renderer, 400, 316, 368, 300) in
  SDL_RenderDrawLine(renderer, 368, 300, 400, 284)

func main() -> Int :
  let _ = SDL_Init(32) in
  let window = SDL_CreateWindow("Pole Isometric Demo", 100, 100, 800, 600, 4) in
  let renderer = SDL_CreateRenderer(window, -1, 2) in
  let _ = SDL_SetRenderDrawColor(renderer, 40, 80, 40, 255) in
  let _ = SDL_RenderClear(renderer) in
  let _ = draw_one_tile(renderer) in
  let _ = SDL_RenderPresent(renderer) in
  let _ = SDL_Delay(10000) in
  let _ = SDL_DestroyRenderer(renderer) in
  let _ = SDL_DestroyWindow(window) in
  let _ = SDL_Quit(()) in
  0
