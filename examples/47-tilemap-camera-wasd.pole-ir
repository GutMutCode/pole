// Tilemap with WASD camera movement
// Week 1 Day 5-6: Camera control demo

@extern("SDL_Init")
func SDL_Init(flags: Int) -> Int

@extern("SDL_CreateWindow")
func SDL_CreateWindow(title: String, x: Int, y: Int, w: Int, h: Int, flags: Int) -> Ptr<Unit>

@extern("SDL_CreateRenderer")
func SDL_CreateRenderer(window: Ptr<Unit>, index: Int, flags: Int) -> Ptr<Unit>

@extern("SDL_DestroyRenderer")
func SDL_DestroyRenderer(renderer: Ptr<Unit>) -> Unit

@extern("SDL_DestroyWindow")
func SDL_DestroyWindow(window: Ptr<Unit>) -> Unit

@extern("SDL_Quit")
func SDL_Quit(dummy: Unit) -> Unit

@extern("SDL_PollEvent")
func SDL_PollEvent(event: Ptr<Unit>) -> Int

@extern("SDL_RenderClear")
func SDL_RenderClear(renderer: Ptr<Unit>) -> Int

@extern("SDL_RenderPresent")
func SDL_RenderPresent(renderer: Ptr<Unit>) -> Unit

@extern("SDL_SetRenderDrawColor")
func SDL_SetRenderDrawColor(renderer: Ptr<Unit>, r: Int, g: Int, b: Int, a: Int) -> Int

@extern("SDL_RenderFillRect")
func SDL_RenderFillRect(renderer: Ptr<Unit>, rect: Ptr<Unit>) -> Int

@extern("SDL_Delay")
func SDL_Delay(ms: Int) -> Unit

@extern("malloc")
func c_malloc(size: Int) -> Ptr<Unit>

@extern("free")
func c_free(ptr: Ptr<Unit>) -> Unit

@extern("pole_read_i32")
func read_i32(ptr: Ptr<Unit>) -> Int

@extern("pole_read_i32_at")
func read_i32_at(ptr: Ptr<Unit>, offset: Int) -> Int

@extern("pole_write_i32_at")
func write_i32_at(ptr: Ptr<Unit>, offset: Int, value: Int) -> Unit

@extern("printf")
@variadic
func printf(format: String) -> Int

func create_rect(x: Int, y: Int, w: Int, h: Int) -> Ptr<Unit>
:
  let rect = c_malloc(16) in
  let _ = write_i32_at(rect, 0, x) in
  let _ = write_i32_at(rect, 4, y) in
  let _ = write_i32_at(rect, 8, w) in
  let _ = write_i32_at(rect, 12, h) in
  rect

func get_tile_type(x: Int, y: Int) -> Int
:
  let sum = x + y in
  let mod_val = sum - sum / 2 * 2 in
  mod_val

func render_tile(renderer: Ptr<Unit>, tx: Int, ty: Int, camera_x: Int, camera_y: Int) -> Unit
:
  let screen_x = tx * 64 - camera_x in
  let screen_y = ty * 64 - camera_y in
  let tile_type = get_tile_type(tx, ty) in
  if tile_type == 0 then
    let _ = SDL_SetRenderDrawColor(renderer, 100, 150, 100, 255) in
    let rect = create_rect(screen_x, screen_y, 62, 62) in
    let _ = SDL_RenderFillRect(renderer, rect) in
    let _ = c_free(rect) in
    ()
  else
    let _ = SDL_SetRenderDrawColor(renderer, 150, 120, 80, 255) in
    let rect = create_rect(screen_x, screen_y, 62, 62) in
    let _ = SDL_RenderFillRect(renderer, rect) in
    let _ = c_free(rect) in
    ()

func render_tilemap_row(renderer: Ptr<Unit>, y: Int, max_x: Int, camera_x: Int, camera_y: Int, current_x: Int) -> Unit
:
  if current_x >= max_x then
    ()
  else
    let _ = render_tile(renderer, current_x, y, camera_x, camera_y) in
    render_tilemap_row(renderer, y, max_x, camera_x, camera_y, current_x + 1)

func render_tilemap(renderer: Ptr<Unit>, width: Int, height: Int, camera_x: Int, camera_y: Int, current_y: Int) -> Unit
:
  if current_y >= height then
    ()
  else
    let _ = render_tilemap_row(renderer, current_y, width, camera_x, camera_y, 0) in
    render_tilemap(renderer, width, height, camera_x, camera_y, current_y + 1)

func process_camera_input(event: Ptr<Unit>, camera_x: Int, camera_y: Int, running: Int) -> Ptr<Unit>
:
  let result = c_malloc(12) in
  let has_event = SDL_PollEvent(event) in
  if has_event == 0 then
    let _ = write_i32_at(result, 0, camera_x) in
    let _ = write_i32_at(result, 4, camera_y) in
    let _ = write_i32_at(result, 8, running) in
    result
  else
    let event_type = read_i32(event) in
    if event_type == 768 then
      let keycode = read_i32_at(event, 24) in
      if keycode == 27 then
        let _ = write_i32_at(result, 0, camera_x) in
        let _ = write_i32_at(result, 4, camera_y) in
        let _ = write_i32_at(result, 8, 0) in
        result
      else if keycode == 119 then
        let new_y = camera_y - 20 in
        let _ = write_i32_at(result, 0, camera_x) in
        let _ = write_i32_at(result, 4, new_y) in
        let _ = write_i32_at(result, 8, running) in
        result
      else if keycode == 115 then
        let new_y = camera_y + 20 in
        let _ = write_i32_at(result, 0, camera_x) in
        let _ = write_i32_at(result, 4, new_y) in
        let _ = write_i32_at(result, 8, running) in
        result
      else if keycode == 97 then
        let new_x = camera_x - 20 in
        let _ = write_i32_at(result, 0, new_x) in
        let _ = write_i32_at(result, 4, camera_y) in
        let _ = write_i32_at(result, 8, running) in
        result
      else if keycode == 100 then
        let new_x = camera_x + 20 in
        let _ = write_i32_at(result, 0, new_x) in
        let _ = write_i32_at(result, 4, camera_y) in
        let _ = write_i32_at(result, 8, running) in
        result
      else
        let _ = write_i32_at(result, 0, camera_x) in
        let _ = write_i32_at(result, 4, camera_y) in
        let _ = write_i32_at(result, 8, running) in
        result
    else if event_type == 256 then
      let _ = write_i32_at(result, 0, camera_x) in
      let _ = write_i32_at(result, 4, camera_y) in
      let _ = write_i32_at(result, 8, 0) in
      result
    else
      let _ = write_i32_at(result, 0, camera_x) in
      let _ = write_i32_at(result, 4, camera_y) in
      let _ = write_i32_at(result, 8, running) in
      result

func game_loop(renderer: Ptr<Unit>, event: Ptr<Unit>, camera_x: Int, camera_y: Int, running: Int, frame: Int) -> Unit
:
  if running == 0 then
    ()
  else if frame >= 300 then
    ()
  else
    let input = process_camera_input(event, camera_x, camera_y, running) in
    let new_camera_x = read_i32_at(input, 0) in
    let new_camera_y = read_i32_at(input, 4) in
    let new_running = read_i32_at(input, 8) in
    let _ = c_free(input) in
    let _ = SDL_SetRenderDrawColor(renderer, 30, 30, 40, 255) in
    let _ = SDL_RenderClear(renderer) in
    let _ = render_tilemap(renderer, 20, 15, new_camera_x, new_camera_y, 0) in
    let _ = SDL_RenderPresent(renderer) in
    let _ = SDL_Delay(16) in
    game_loop(renderer, event, new_camera_x, new_camera_y, new_running, frame + 1)

func main() -> Int
:
  let _ = printf("=== Tilemap Camera Control ===\n") in
  let _ = printf("WASD to move camera\n") in
  let _ = printf("ESC to quit (or wait 5 seconds)\n") in
  let _ = SDL_Init(32) in
  let window = SDL_CreateWindow("Tilemap Camera", 805240832, 805240832, 800, 600, 4) in
  let renderer = SDL_CreateRenderer(window, 0, 6) in
  let event = c_malloc(56) in
  let _ = game_loop(renderer, event, 0, 0, 1, 0) in
  let _ = c_free(event) in
  let _ = SDL_DestroyRenderer(renderer) in
  let _ = SDL_DestroyWindow(window) in
  let _ = SDL_Quit(()) in
  let _ = printf("Camera demo complete!\n") in
  0

@test_case(expected=0)
