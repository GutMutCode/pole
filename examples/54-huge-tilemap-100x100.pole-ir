// Week 3: Huge Tilemap - 100x100 Grid with Viewport Culling
// 10,000 tiles using procedural generation

@extern("SDL_Init")
func SDL_Init(flags: Int) -> Int

@extern("SDL_CreateWindow")
func SDL_CreateWindow(title: String, x: Int, y: Int, w: Int, h: Int, flags: Int) -> Ptr<Unit>

@extern("SDL_CreateRenderer")
func SDL_CreateRenderer(window: Ptr<Unit>, index: Int, flags: Int) -> Ptr<Unit>

@extern("SDL_SetRenderDrawColor")
func SDL_SetRenderDrawColor(renderer: Ptr<Unit>, r: Int, g: Int, b: Int, a: Int) -> Int

@extern("SDL_RenderClear")
func SDL_RenderClear(renderer: Ptr<Unit>) -> Int

@extern("SDL_RenderPresent")
func SDL_RenderPresent(renderer: Ptr<Unit>) -> Unit

@extern("SDL_RenderDrawLine")
func SDL_RenderDrawLine(renderer: Ptr<Unit>, x1: Int, y1: Int, x2: Int, y2: Int) -> Int

@extern("SDL_PollEvent")
func SDL_PollEvent(event: Ptr<Unit>) -> Int

@extern("SDL_Delay")
func SDL_Delay(ms: Int) -> Unit

@extern("SDL_DestroyRenderer")
func SDL_DestroyRenderer(renderer: Ptr<Unit>) -> Unit

@extern("SDL_DestroyWindow")
func SDL_DestroyWindow(window: Ptr<Unit>) -> Unit

@extern("SDL_Quit")
func SDL_Quit(dummy: Unit) -> Unit

@extern("puts")
func c_puts(s: String) -> Int

@extern("malloc")
func malloc(size: Int) -> Ptr<Unit>

@extern("pole_read_i32_at")
func pole_read_i32_at(ptr: Ptr<Unit>, offset: Int) -> Int

// Procedural tile generation based on position
// Pattern: grid roads every 10 tiles, random buildings
func get_tile_procedural(x: Int, y: Int) -> Int:
  let mod_x = x - (x / 10) * 10 in
  let mod_y = y - (y / 10) * 10 in
  if mod_x == 0 then
    1
  else
    if mod_y == 0 then
      1
    else
      let sum = x + y in
      let mod_sum = sum - (sum / 7) * 7 in
      if mod_sum == 0 then
        2
      else
        0

// Draw single isometric tile
func draw_tile(renderer: Ptr<Unit>, tx: Int, ty: Int, tile_type: Int, cam_x: Int, cam_y: Int) -> Int:
  let base_x = (tx - ty) * 32 + 400 in
  let base_y = (tx + ty) * 16 + 100 in
  let sx = base_x + cam_x in
  let sy = base_y + cam_y in
  let r = if tile_type == 0 then 100 else if tile_type == 1 then 150 else 180 in
  let g = if tile_type == 0 then 200 else if tile_type == 1 then 150 else 160 in
  let b = if tile_type == 0 then 100 else if tile_type == 1 then 150 else 140 in
  let _ = SDL_SetRenderDrawColor(renderer, r, g, b, 255) in
  let _ = SDL_RenderDrawLine(renderer, sx, sy - 16, sx + 32, sy) in
  let _ = SDL_RenderDrawLine(renderer, sx + 32, sy, sx, sy + 16) in
  let _ = SDL_RenderDrawLine(renderer, sx, sy + 16, sx - 32, sy) in
  let _ = SDL_RenderDrawLine(renderer, sx - 32, sy, sx, sy - 16) in
  0

// Check if tile is visible in viewport
func is_visible(tx: Int, ty: Int, cam_x: Int, cam_y: Int) -> Int:
  let sx = (tx - ty) * 32 + 400 + cam_x in
  let sy = (tx + ty) * 16 + 100 + cam_y in
  if sx < -100 then
    0
  else
    if sx > 900 then
      0
    else
      if sy < -100 then
        0
      else
        if sy > 700 then
          0
        else
          1

// Render single row with viewport culling
func render_row_culled(renderer: Ptr<Unit>, row: Int, col: Int, max_col: Int, cam_x: Int, cam_y: Int) -> Int:
  if col >= max_col then
    0
  else
    let visible = is_visible(col, row, cam_x, cam_y) in
    let _ = if visible == 1 then
      let tile_type = get_tile_procedural(col, row) in
      draw_tile(renderer, col, row, tile_type, cam_x, cam_y)
    else
      0 in
    render_row_culled(renderer, row, col + 1, max_col, cam_x, cam_y)

// Render all rows with culling
func render_grid_culled(renderer: Ptr<Unit>, row: Int, max_row: Int, max_col: Int, cam_x: Int, cam_y: Int) -> Int:
  if row >= max_row then
    0
  else
    let _ = render_row_culled(renderer, row, 0, max_col, cam_x, cam_y) in
    render_grid_culled(renderer, row + 1, max_row, max_col, cam_x, cam_y)

// Single frame render
func render_frame(renderer: Ptr<Unit>, cam_x: Int, cam_y: Int) -> Int:
  let _ = SDL_SetRenderDrawColor(renderer, 40, 80, 40, 255) in
  let _ = SDL_RenderClear(renderer) in
  let _ = render_grid_culled(renderer, 0, 100, 100, cam_x, cam_y) in
  let _ = SDL_RenderPresent(renderer) in
  0

// Main demo
func main() -> Int:
  let _ = c_puts("=== Week 3: Huge Tilemap 100x100 ===") in
  let _ = c_puts("10,000 tiles with viewport culling") in
  let _ = c_puts("Procedural tile generation") in
  let _ = c_puts("") in
  let _ = SDL_Init(32) in
  let window = SDL_CreateWindow("Pole Week 3 - 100x100 Tilemap", 805240832, 805240832, 800, 600, 4) in
  let renderer = SDL_CreateRenderer(window, -1, 2) in
  let _ = c_puts("Rendering 100x100 grid (viewport culling active)...") in
  let _ = render_frame(renderer, -2000, -1000) in
  let _ = SDL_Delay(5000) in
  let _ = SDL_DestroyRenderer(renderer) in
  let _ = SDL_DestroyWindow(window) in
  let _ = SDL_Quit(()) in
  let _ = c_puts("") in
  let _ = c_puts("Huge tilemap demo complete!") in
  let _ = c_puts("  - 100x100 grid (10,000 tiles)") in
  let _ = c_puts("  - Procedural generation") in
  let _ = c_puts("  - Viewport culling") in
  0

@test_case(expected=0)
