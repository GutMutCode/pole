// Core Library - Entity and Memory Management
// Reusable across all game systems

@extern("malloc")
func malloc(size: Int) -> Ptr<Unit>

@extern("free")
func free(ptr: Ptr<Unit>) -> Unit

@extern("pole_write_i32_at")
func write_i32(ptr: Ptr<Unit>, offset: Int, value: Int) -> Unit

@extern("pole_read_i32_at")
func read_i32(ptr: Ptr<Unit>, offset: Int) -> Int

// Math helpers
func min(a: Int, b: Int) -> Int:
if a < b then a else b

func max(a: Int, b: Int) -> Int:
if a > b then a else b

func clamp(value: Int, min_val: Int, max_val: Int) -> Int:
let clamped_min = max(value, min_val) in
min(clamped_min, max_val)

func abs(x: Int) -> Int:
if x < 0 then 0 - x else x

// Distance calculation (Manhattan distance)
func distance(x1: Int, y1: Int, x2: Int, y2: Int) -> Int:
let dx = abs(x1 - x2) in
let dy = abs(y1 - y2) in
dx + dy

// Check if two positions are adjacent (distance <= 1)
func is_adjacent(x1: Int, y1: Int, x2: Int, y2: Int) -> Int:
let dist = distance(x1, y1, x2, y2) in
if dist <= 1 then 1 else 0
