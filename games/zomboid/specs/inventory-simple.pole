// Inventory System - Simplified Spec

function inventory_create:
  purpose: create inventory with N slots
  input: num_slots (Int)
  output: Ptr<Unit> (inventory handle)
  
  constraints:
    - num_slots > 0
    - num_slots <= 1000
  
  examples:
    - 10 → inventory pointer
    - 50 → inventory pointer

function inventory_add_item:
  purpose: add item to inventory with automatic stacking
  input: inv (Ptr<Unit>), max_slots (Int), item_id (Int), quantity (Int)
  output: Int (1=success, 0=failure)
  
  constraints:
    - item_id > 0
    - quantity > 0
    - if item exists, add to existing slot
    - if item is new, use first empty slot
    - if inventory full, return 0
  
  examples:
    - (inv, 10, 1, 5) → 1
    - (inv, 10, 1, 3) → 1 (stacked)
    - (full_inv, 10, 99, 1) → 0 (failed)

function inventory_find_item:
  purpose: find slot containing specific item
  input: inv (Ptr<Unit>), max_slots (Int), item_id (Int)
  output: Int (slot index or -1 if not found)
  
  examples:
    - (inv, 10, 1) → 0 (found at slot 0)
    - (inv, 10, 999) → -1 (not found)

function inventory_consume:
  purpose: reduce quantity in slot for crafting
  input: inv (Ptr<Unit>), slot (Int), amount (Int)
  output: Int (1=success, 0=failure)
  
  constraints:
    - if quantity >= amount, reduce quantity
    - if resulting quantity = 0, clear slot
    - if quantity < amount, return 0
  
  examples:
    - (inv, 0, 2) → 1 (consumed 2 units)
    - (inv, 0, 100) → 0 (not enough)
